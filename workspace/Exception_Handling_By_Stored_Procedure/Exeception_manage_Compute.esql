

CREATE COMPUTE MODULE Exeception_manage_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		
		DECLARE msg_id REFERENCE TO InputLocalEnvironment.Destination.HTTP.RequestIdentifier;
 		DECLARE exc REFERENCE TO InputExceptionList.*[1];
 		DECLARE File,Line,Type,Lable,Text CHARACTER;
 		DECLARE Number INTEGER;
 	
 		WHILE LASTMOVE(exc) DO
 			MOVE exc LASTCHILD;
 			IF exc.Number IS NOT NULL THEN
 				SET File=exc.File;
 				SET Line=exc.Line;
 				SET Type=exc.Type;
 				SET Lable=exc.Lable;
 				SET Number=exc.Number;
 				SET Text=exc.Text;
 			END IF;
 		END WHILE;
 		
 		SET OutputRoot.XMLNSC.ExceptionList.Line=Line;
 		SET OutputRoot.XMLNSC.ExceptionList.Number=Number;
 		SET OutputRoot.XMLNSC.ExceptionList.Text=Text;
 		
 		DECLARE MSGid INTEGER CAST(msg_id AS INTEGER CCSID InputRoot.Properties.CodedCharSetId);
 		
 		CALL Execep(ApplicationLabel,MessageFlowLabel,NodeLabel,MSGid,Line,CAST(Number AS CHARACTER),Text,CURRENT_TIMESTAMP);
 	END;
END MODULE;
  		CREATE PROCEDURE Execep(IN PARAM1 CHARACTER, IN PARAM2 CHARACTER, IN PARAM3 CHARACTER, IN PARAM4 INTEGER, IN PARAM5 CHARACTER, IN PARAM6 CHARACTER, IN PARAM7 CHARACTER, IN PARAM8 TIMESTAMP)
  		LANGUAGE DATABASE
		EXTERNAL NAME "EXCEPTION_PROCEDURE" ;
