

CREATE COMPUTE MODULE MF_DB_Logging_Provider_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		-- code for host request (json)
		DECLARE Inref REFERENCE TO InputRoot.JSON.Data;
		
		DECLARE InputDataBlob BLOB;
		DECLARE InputDataChar CHARACTER;
		
		SET InputDataBlob = ASBITSTREAM(Inref);
		SET InputDataChar = CAST(InputDataBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		
		DECLARE AppName CHARACTER 'Log_DB_Logging_Consumer';
		DECLARE MsgFlowName CHARACTER 'MF_DB_Logging_Provider';
		DECLARE LogType CHARACTER 'Host Request';
		
		CALL InsertLogs(AppName,MsgFlowName,LogType,InputDataChar);
		-- set output root as json format 
		SET OutputRoot.JSON.Data.Response = InputRoot.JSON.Data;
		-- Code for Host reponse (json)
		DECLARE Inref1 REFERENCE TO OutputRoot.JSON.Data;
		
		DECLARE OutputDataBlob BLOB;
		DECLARE OutputDataChar CHARACTER;
		
		SET OutputDataBlob = ASBITSTREAM(Inref1);
		SET OutputDataChar = CAST(OutputDataBlob as CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		
		DECLARE AppName1 CHARACTER 'Log_DB_Logging_Consumer';
		DECLARE MsgFlowName1 CHARACTER 'MF_DB_Logging_Provider';
		DECLARE LogType1 CHARACTER 'Host Response';
		
		CALL InsertLogs1(AppName1,MsgFlowName1,LogType1,OutputDataChar);
	END;
	
		
END MODULE;
